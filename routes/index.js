var express = require('express');
var router = express.Router();



const itemlist = [
  { 'id': 'ID', 'Term': 'Term', 'Description': 'Description', 'Reference': 'R'},
  { 'id': 1, 'Term': 'Continuous Integration (CI)', 'Description': 'Continuous Integration is a software development practice in which code changes are frequently and automatically integrated into a shared repository. Developers regularly merge their code into the main branch, triggering automated tests and build processes to detect integration issues early in the development cycle.', 'Reference': 'Martin Fowler. "Continuous Integration." Martin Fowlers website. URL:https://martinfowler.com/articles/continuousIntegration.html'},
  { 'id': 2, 'Term': 'Continuous Deployment (CD)', 'Description': 'Continuous Deployment is an extension of Continuous Integration, where code changes that pass all automated tests are automatically deployed to production environments. This practice aims to deliver software updates to users as soon as they are ready, ensuring a continuous flow of changes and improvements.', 'Reference': 'ThoughtWorks. "Continuous Deployment." ThoughtWorks Insights.URL: https://www.thoughtworks.com/continuous-deployment'},
  { 'id': 3, 'Term': 'Infrastructure as Code (IaC)', 'Description': 'Infrastructure as Code is a DevOps practice that involves managing and provisioning infrastructure resources (e.g., servers, networks, and storage) using machine-readable definition files. This approach allows developers to treat infrastructure configurations as code, enabling versioning, automated deployments, and consistency across environments.', 'Reference': 'HashiCorp. "Infrastructure as Code (IaC) - What, Why, and How." HashiCorp Learn.URL: https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code'},
  { 'id': 4, 'Term': 'Microservices', 'Description': 'Microservices is an architectural pattern where a software application is broken down into small, loosely-coupled, and independently deployable services. Each service focuses on a specific functionality and communicates with others through well-defined APIs. This approach promotes flexibility, scalability, and easier maintenance of complex systems.', 'Reference': 'Fowler, M. (2014). "Microservices: a definition of this new architectural term." Martin Fowlers website.URL: https://martinfowler.com/articles/microservices.html'},
  { 'id': 5, 'Term': 'Blue-Green Deployment:', 'Description': 'Blue-Green Deployment is a technique used for releasing new versions of an application with minimal downtime and risk. In this approach, two identical environments (blue and green) are set up. The current version of the application runs in one environment while the new version is deployed in the other. After successful testing, the traffic is switched from the old version to the new one, minimizing disruption.', 'Reference': 'Martin Fowler. "BlueGreenDeployment." Martin Fowlers website.URL: https://martinfowler.com/bliki/BlueGreenDeployment.html'},
  { 'id': 6, 'Term': 'Canary Deployment', 'Description': 'Canary Deployment is a deployment strategy that involves gradually rolling out a new version of the software to a subset of users or servers before releasing it to the entire user base. This allows for early detection of potential issues and reduces the impact of bugs or performance problems on the entire system.', 'Reference': 'Microsoft Azure. "Understanding canary deployment in Azure API Management." Microsoft Docs.URL: https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-canary-operations'},
  { 'id': 7, 'Term': 'Configuration Management', 'Description': 'Configuration Management is the process of maintaining and controlling the configuration of software systems and infrastructure throughout their lifecycle. It involves managing changes, ensuring consistency, and tracking configurations to prevent conflicts and maintain system stability.', 'Reference': 'Red Hat. "What is configuration management?" Red Hat Insights.URL: https://www.redhat.com/en/topics/automation/what-is-configuration-management'},
  { 'id': 8, 'Term': 'DevOps Culture', 'Description': 'DevOps Culture refers to a set of practices, values, and principles that emphasize collaboration, communication, and shared responsibility between software development and IT operations teams. The goal is to break down silos, foster a culture of trust, and align everyone towards the common objective of delivering high-quality software quickly and reliably.', 'Reference': 'Humble, J., & Farley, D. (2010). "Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation." Addison-Wesley Professional.'},
  { 'id': 9, 'Term': 'Version Control System', 'Description': 'A Version Control System is a tool that helps developers track and manage changes to their codebase over time. It allows multiple developers to work on the same project simultaneously, providing features like branching, merging, and history tracking, which are essential for successful collaboration and code management.', 'Reference': 'Atlassian. "What is version control?" Atlassian Git Tutorial.URL: https://www.atlassian.com/git/tutorials/what-is-version-control'},
  { 'id': 10, 'Term': 'Incident Management', 'Description': 'Incident Management is the process of identifying, prioritizing, and resolving incidents or disruptions that occur in a software system or IT infrastructure. The aim is to restore normal operation as quickly as possible and minimize the impact on users, following predefined procedures and communication protocols.', 'Reference': 'ServiceNow. "Incident Management." ServiceNow Documentation.URL: https://docs.servicenow.com/bundle/paris-it-service-management/page/product/incident-management/concept/c_IncidentManagement.html'},
  { 'id': 11, 'Term': 'Containerization', 'Description': 'Containerization is a virtualization method that allows developers to package applications and their dependencies in isolated containers. Containers provide a consistent runtime environment, enabling applications to run consistently across different environments.', 'Reference': 'Docker. "Get Started with Docker." Docker Documentation.URL: https://docs.docker.com/get-started/'},
  { 'id': 12, 'Term': 'Orchestration', 'Description': 'Orchestration refers to the automated management and coordination of containers or services within a distributed system. It handles tasks like provisioning, scaling, and networking to ensure efficient deployment and operation of applications.', 'Reference': 'Kubernetes. "What is Kubernetes?" Kubernetes Documentation.URL: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/'},
  { 'id': 13, 'Term': 'Agile Development', 'Description': 'Agile Development is an iterative and incremental approach to software development. It emphasizes collaboration, adaptive planning, and continuous feedback to deliver high-quality products efficiently.', 'Reference': 'Agile Alliance. "The Agile Manifesto." Agile Alliance website.URL: https://agilemanifesto.org/'},
  { 'id': 14, 'Term': 'Site Reliability Engineering (SRE)', 'Description': 'Site Reliability Engineering is a discipline that combines software engineering and IT operations to ensure reliable and scalable systems. SRE teams focus on building robust, efficient, and highly available infrastructure and applications.', 'Reference': 'Google Cloud. "Site Reliability Engineering." Google SRE Resources.URL: https://sre.google/resources/'},
  { 'id': 15, 'Term': 'Infrastructure Automation', 'Description': 'Infrastructure Automation involves using tools and processes to automate the configuration, provisioning, and management of IT infrastructure. It helps streamline repetitive tasks and ensures consistency across environments.', 'Reference': 'Ansible. "What is Ansible?" Ansible Documentation.URL: https://www.ansible.com/resources/get-started'},
  { 'id': 16, 'Term': 'Monitoring and Alerting', 'Description': 'Monitoring and Alerting are essential practices in DevOps, involving the continuous monitoring of systems and applications to detect issues and trigger alerts for timely responses.', 'Reference': 'Prometheus. "Monitoring and Alerting Overview." Prometheus Documentation.URL: https://prometheus.io/docs/prometheus/latest/getting_started/'},
  { 'id': 17, 'Term': 'GitOps', 'Description': 'GitOps is an operational practice that uses Git as a single source of truth for defining infrastructure and application changes. All changes are made through version-controlled Git repositories, leading to automated deployments.', 'Reference': 'Weaveworks. "What is GitOps?" Weaveworks website.URL: https://www.weave.works/technologies/gitops/'},
  { 'id': 18, 'Term': 'ChatOps', 'Description': 'ChatOps is a collaboration model where developers use chat platforms or bots to interact with automation tools and perform various tasks, such as deployments, monitoring, and incident management.', 'Reference': 'Atlassian. "ChatOps: What it is and why you need it." Atlassian Blog.URL: https://www.atlassian.com/blog/software-teams/what-is-chatops-adoption-guide'},
  { 'id': 19, 'Term': 'DevSecOps', 'Description': 'DevSecOps integrates security practices into the DevOps workflow, emphasizing the importance of addressing security concerns early in the software development process.', 'Reference': 'OWASP. "DevSecOps - Integrating Security into DevOps." OWASP website.URL: https://owasp.org/www-project-devsecops-maturity-model/'},
  { 'id': 20, 'Term': 'Infrastructure as a Service (IaaS)', 'Description': 'Infrastructure as a Service is a cloud computing model where virtualized resources, such as virtual machines and storage, are provided over the internet. Users can manage and control these resources without the need for physical hardware.', 'Reference': 'Microsoft Azure. "What is IaaS?" Microsoft Azure Documentation.URL: https://azure.microsoft.com/en-us/overview/what-is-iaas/'},
];

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index', { title: 'SIT722 DevOps Glossary', sub: 'my website showing a collection of DevOps terms and their brief Descriptions.',
   items: itemlist });
});

module.exports = router;